package edu.hust.visitor;

/**
 * 访问者模式：封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。
 * 
 * 意图：主要将数据结构与数据操作分离。
 * 主要解决：稳定的数据结构和易变的操作耦合问题。
 * 何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，使用访问者模式将这些封装到类中。
 * 如何解决：在被访问的类里面加一个对外提供接待访问者的接口。
 * 关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。
 * 应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。
 * 优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。
 * 缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。
 * 使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，也不希望在增加新操作时修改这些类。
 * 注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器（struts2使用的是代理模式）。
 * 
 * 访问者模式中的角色：
 *	●　Visitor（抽象访问者）：抽象类或则接口，声明访问者可以访问某些元素，具体到程序中就是visit方法的参数定义哪些对象是可以被访问的。
 *
 *	●　ConcreteVisitor（具体访问者）：它影响访问者访问到一个类后该怎么干，要做什么事情。
 *
 *	●　Element（抽象元素）：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept()方法中的参数来定义的。
 *
 *	●　ConcreteElement（具体元素）：实现accept()方法，通常是visitor.visit(this)，基本上都形成了一种模式了。
 *
 *	●　ObjectStructure（结构对象）：元素产生者，一般容纳在多个不同类、不同接口的容器，如List、Set、Map等，在项目中，一般很少抽象出这个角色。
 * 
 * @author liangjian
 * @date 2016-01-17
 *
 */
public class MainClass {

	public static void main(String[] args) {
		for (int i = 0; i < 10; i++) {
			Element element = ObjectStructure.createElement();
			element.accept(new Visitor()); //参数放的是一个新的Visitor类，该类底层通过this直接获取了主调用者element对象
		}
	}
}
