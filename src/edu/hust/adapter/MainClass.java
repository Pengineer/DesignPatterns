package edu.hust.adapter;

/**
 * 适配器模式：将一个类的接口变成客户端所期待的另一种接口，从而使得原本因接口不匹配而无法在一起工作的两个类能够在一起工作。
 * 
 * 一个很现实的模型就是拼图，当两个拼图因为对接接口不匹配而无法拼接时，可以借助第三个拼图将两者连接起来。
 * 
 * java API中关于适配器模式使用的较多的是在图形化界面处理部分，给一个窗口添加一个事件接口WindowListener，该接口定义了很多窗口事件（
 * 打开、关闭、最小化等），如果我要添加的是窗口关闭事件，那么我没必要实现该接口的所有方法，为了程序的方便，就加入了WindowAdapter抽象类，
 * 该类实现了WindowListener的所有方法，但方法体都是空的，再添加窗口事件时，我们只需要使用匿名内部类的方法创建一个WindowListener子类覆写
 * 所需要的方法即可。
 * 
 * 《设计模式之禅》一书中提到适配器模式最好在开发阶段不要考虑它，它不是为了解决还处于开发阶段的问题，而是解决正在服役的项目问题，这个
 * 模式使用的主要场景是在扩展应用中。当你有动机修改一个已经投产中的接口时，适配器模式可能是最适合你的模式。
 * 该书所举的例子是两个接口传输数据，由于数据的格式不一样，导致无法使用统一的接口调用数据获取类来返回固定格式的数据（原始系统返回的是String，
 * 新增的接口返回的数据是Map集合），这时就可以为新增的接口增加一个适配器，将数据以系统原始格式返回。
 * 
 * @author liangjian
 *
 */
public class MainClass {

}
